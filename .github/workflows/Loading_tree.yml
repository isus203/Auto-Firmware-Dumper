name: Generating and loading a tree 

on:
  workflow_dispatch:
    inputs:
      USER_NAME:
        description: 'Name in GitHub Account'
        required: true
        default: ''
      USER_EMAIL:
        description: 'E-mail in GitHub Account'
        required: true
        default: ''
      FIRMWARE_URL:
        description: 'Stock ROM Link'
        required: true
        default: ''
      VENDOR_NAME:
        description: 'Device manufacturer '
        required: true
        default: ''
      DEVICE_NAME:
        description: 'Device code name '
        required: true
        default: ''
      PROJECT:
        description: 'Selecting a lineage for vendor generation:'
        required: true
        default: 'LineageOS 21.0'
        type: choice
        options:
          - 'LineageOS 20.0'
          - 'LineageOS 21.0'
          - 'LineageOS 22.0'

jobs:
  dump:
    name: Auto Firmware Dumper
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GTOKEN }}
      FUR: ${{ github.event.inputs.FIRMWARE_URL }}
      UN: ${{ github.event.inputs.USER_NAME }}
      UEM: ${{ github.event.inputs.USER_EMAIL }}
    permissions:
      contents: write
    steps:
    - name: Check Out
      uses: actions/checkout@v4
      
    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main
      
    - name: Update Packages
      run: |
        sudo apt update \
        && sudo apt -y upgrade \
        && sudo apt -y install cpio aria2 git python3 neofetch tar gzip \
        && sudo apt install -y unace unrar zip unzip p7zip-full p7zip-rar sharutils rar uudeview mpack arj cabextract device-tree-compiler liblzma-dev python3-pip brotli liblz4-tool axel gawk aria2 detox cpio rename liblz4-dev jq git-lfs

    - name: Setup GithubCLI
      run: |
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y

    - name: Installing Python Components
      run: |
        pip3 install backports.lzma extract-dtb protobuf==3.20.0 pycryptodome docopt zstandard twrpdtgen future requests humanize clint lz4 pycryptodome pycryptodomex
        pip3 install git+https://github.com/sebaubuntu-python/aospdtgen
        pip3 install twrpdtgen
        
    - name: Clone and Setup DumprX
      run: |
        cd /home
        sudo mkdir mode=777 Auto-Dumper
        cd Auto-Dumper
        git clone https://github.com/DumprX/DumprX
        cd DumprX
        sudo chmod 777 *.sh
        bash setup.sh

    - name: Setting up Git
      run: |
        git config --global user.name "${{ env.UN }}"
        git config --global user.email "${{ env.UEM }}"
        git config --global http.postBuffer 999999999
        unset GITHUB_TOKEN
        gh auth login --with-token <<< "${{ secrets.GTOKEN }}"

    - name: Creating Dump
      run: |
        cd /home/Auto-Dumper/DumprX
        sudo bash dumper.sh ${{ env.FUR }}
        sudo chmod -R 777 out

    - name: Uploading ROM Dump
      run: |
        cd /home/Auto-Dumper/DumprX/out
        sudo chmod -R 777 *
        if [ -d system ]; then
           echo " "
        else
           echo "Failed!";
           cd /home/Auto-Dumper
           sudo rm -rf DumprX
           exit 1;
        fi;
        los_dir="lineage-device-tree"
        if [ -d "$los_dir" ]; then
           cp -r $los_dir /home/Auto-Dumper
        else
           echo "Lineage device tree not found!";
        fi;
        tw_dir="twrp-device-tree"
        if [ -d "$tw_dir" ]; then
           cp -r $tw_dir /home/Auto-Dumper
        else
           echo "TWRP device tree not found!";
           unset tw_dir
        fi;
        if [ -d vendor ]; then
           cd vendor
        else
           cd system
           [ -d system ] && cd system
        fi
        brand=${{ github.event.inputs.VENDOR_NAME }}
        codename=${{ github.event.inputs.DEVICE_NAME }}
        cd /home/Auto-Dumper
        echo "${{ github.event.inputs.DEVICE_NAME }}" >> codename.txt
        echo "${{ github.event.inputs.VENDOR_NAME }}" >> brand.txt
        cd /home/Auto-Dumper/DumprX/out
        cd system
        if [ -d system ]; then
           cd system
           version=$(grep "ro.build.version.release_or_codename=" build.prop | cut -d'=' -f2)
           fingerprint=$(grep "ro.system.build.fingerprint=" build.prop | cut -d'=' -f2)
           cd /home/Auto-Dumper
           echo "$version" >> version.txt
           echo "$fingerprint" >> fingerprint.txt
           cd /home/Auto-Dumper/DumprX/out
        else
           version=$(grep "ro.build.version.release_or_codename=" build.prop | cut -d'=' -f2)
           fingerprint=$(grep "ro.system.build.fingerprint=" build.prop | cut -d'=' -f2)
           cd /home/Auto-Dumper
           echo "$version" >> version.txt
           echo "$fingerprint" >> fingerprint.txt
           cd /home/Auto-Dumper/DumprX/out
        fi
        sudo rm -rf .git
        echo "Compressing images..."
        max_size=48000000
        images=("recovery.img" "boot.img" "vendor_boot.img" "init_boot.img" "dtbo.img" "dtb.img")
        for pf in ${images[@]}; do
           if [ -f $pf ]; then
              if [[ $(stat -c %s $pf) -gt $max_size ]]; then
                 cp $pf /home/Auto-Dumper
                 gzip -f $pf
              fi
           fi
        done
        find /home/Auto-Dumper/DumprX/out -type f -size +50M -delete -exec echo "Deleted: "{} \;
        dat=$(date +%Y%m%d)
        cd /home/Auto-Dumper
        mkdir -p vnd_project/android/device/"$brand"/"$codename"
        cd DumprX/out
        if [ -d "$los_dir" ]; then
           mv /home/Auto-Dumper/DumprX/out/lineage-device-tree/* /home/Auto-Dumper/vnd_project/android/device/"$brand"/"$codename"
           rm -rf $los_dir
        else
           echo "LINEAGEOS DEVİCE TREE NOT FOUND!"
           echo "IF REQUESTED, VENDOR TREE WILL NOT BE CREATED"
        fi
        mkdir -p /home/Auto-Dumper/vnd_project/dump
        mv /home/Auto-Dumper/DumprX/out/* /home/Auto-Dumper/vnd_project/dump/

    - name: Create vendor tree
      run: |
        cd /home/Auto-Dumper
        codename=$(cat codename.txt)
        brand=$(cat brand.txt)
        cd vnd_project
        echo "Controlling LineageOS device tree..."
        if [ -d android/device/"$brand"/"$codename" ]; then
           echo "Device tree found"
        else
           echo "LINEAGEOS DEVİCE TREE NOT FOUND!"
           exit 1
        fi
        echo "Clonning LineageOS tools..."
        git clone https://github.com/LineageOS/android_tools_extract-utils -b ${{ github.event.inputs.PROJECT }} ./android/tools/extract-utils
        echo "Done cloning extract-utils."
        git clone https://github.com/LineageOS/android_prebuilts_extract-tools -b ${{ github.event.inputs.PROJECT }} ./android/prebuilts/extract-tools
        echo "Done cloning extract-tools."
        sudo chmod 777 android/device/"$brand"/"$codename"/setup-makefiles.sh
        cd android/device/"$brand"/"$codename"
        sudo chmod 777 extract-files.sh
        bash extract-files.sh /home/Auto-Dumper/vnd_project/dump/
        echo "Done extracting and making files."
        echo "Pushing as repository now."
      
    - name: Uploading Vendor Tree
      run: |
        cd /home/Auto-Dumper
        codename=$(cat codename.txt)
        brand=$(cat brand.txt)
        cd vnd_project/android/vendor/"$brand"
        ls -all
        if [ -d "$codename" ]; then
        cd "$codename"
        else
        cd FULL-64*
        fi
        sudo chmod -R 777 *
        dat=$(date +%Y%m%d)
        git init
        git branch -M vendor-"$codename"-"$dat"
        git add .
        git commit -s -m "$codename : initial vendor tree"
        git remote -v
        gh repo create android_vendor_"$brand"_"$codename" --public --description="Vendor tree for $codename" --source=. --remote=origin --push
        echo "Succesfull"
        cd /home/Auto-Dumper
        sudo rm -rf DumprX
        sudo rm -rf vnd_project

    - name: Uploading LineageOS Device Tree
      run: |
        cd /home/Auto-Dumper
        codename=$(cat codename.txt)
        brand=$(cat brand.txt)
        cd lineage-device-tree
        dat=$(date +%Y%m%d)
        git init
        git branch -M lineage-"$codename"-"$dat"
        git add .
        git commit -s -m "$codename : LineageOS compatible device tree"
        git remote -v
        gh repo create lineage_device_"$brand"_"$codename" --public --description="LineageOS compatible tree for $codename " --source=. --remote=origin --push
